<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.cl.detect.dao.IodineMapper" >
  <resultMap id="BaseResultMap" type="cn.cl.detect.domain.Iodine" >
    <constructor >
      <idArg column="id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="transaction_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="query_domain" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="src_ip" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dst_ip" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="qtype" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="qr" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="record_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="an_rdata" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, transaction_id, query_domain, src_ip, dst_ip, qtype, qr, record_time, an_rdata
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from dns_record_iodine
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from dns_record_iodine
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.cl.detect.domain.Iodine" >
    insert into dns_record_iodine (id, transaction_id, query_domain, 
      src_ip, dst_ip, qtype, 
      qr, record_time, an_rdata
      )
    values (#{id,jdbcType=BIGINT}, #{transactionId,jdbcType=VARCHAR}, #{queryDomain,jdbcType=VARCHAR}, 
      #{srcIp,jdbcType=VARCHAR}, #{dstIp,jdbcType=VARCHAR}, #{qtype,jdbcType=VARCHAR}, 
      #{qr,jdbcType=VARCHAR}, #{recordTime,jdbcType=TIMESTAMP}, #{anRdata,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.cl.detect.domain.Iodine" >
    insert into dns_record_iodine
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="transactionId != null" >
        transaction_id,
      </if>
      <if test="queryDomain != null" >
        query_domain,
      </if>
      <if test="srcIp != null" >
        src_ip,
      </if>
      <if test="dstIp != null" >
        dst_ip,
      </if>
      <if test="qtype != null" >
        qtype,
      </if>
      <if test="qr != null" >
        qr,
      </if>
      <if test="recordTime != null" >
        record_time,
      </if>
      <if test="anRdata != null" >
        an_rdata,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="transactionId != null" >
        #{transactionId,jdbcType=VARCHAR},
      </if>
      <if test="queryDomain != null" >
        #{queryDomain,jdbcType=VARCHAR},
      </if>
      <if test="srcIp != null" >
        #{srcIp,jdbcType=VARCHAR},
      </if>
      <if test="dstIp != null" >
        #{dstIp,jdbcType=VARCHAR},
      </if>
      <if test="qtype != null" >
        #{qtype,jdbcType=VARCHAR},
      </if>
      <if test="qr != null" >
        #{qr,jdbcType=VARCHAR},
      </if>
      <if test="recordTime != null" >
        #{recordTime,jdbcType=TIMESTAMP},
      </if>
      <if test="anRdata != null" >
        #{anRdata,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.cl.detect.domain.Iodine" >
    update dns_record_iodine
    <set >
      <if test="transactionId != null" >
        transaction_id = #{transactionId,jdbcType=VARCHAR},
      </if>
      <if test="queryDomain != null" >
        query_domain = #{queryDomain,jdbcType=VARCHAR},
      </if>
      <if test="srcIp != null" >
        src_ip = #{srcIp,jdbcType=VARCHAR},
      </if>
      <if test="dstIp != null" >
        dst_ip = #{dstIp,jdbcType=VARCHAR},
      </if>
      <if test="qtype != null" >
        qtype = #{qtype,jdbcType=VARCHAR},
      </if>
      <if test="qr != null" >
        qr = #{qr,jdbcType=VARCHAR},
      </if>
      <if test="recordTime != null" >
        record_time = #{recordTime,jdbcType=TIMESTAMP},
      </if>
      <if test="anRdata != null" >
        an_rdata = #{anRdata,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.cl.detect.domain.Iodine" >
    update dns_record_iodine
    set transaction_id = #{transactionId,jdbcType=VARCHAR},
      query_domain = #{queryDomain,jdbcType=VARCHAR},
      src_ip = #{srcIp,jdbcType=VARCHAR},
      dst_ip = #{dstIp,jdbcType=VARCHAR},
      qtype = #{qtype,jdbcType=VARCHAR},
      qr = #{qr,jdbcType=VARCHAR},
      record_time = #{recordTime,jdbcType=TIMESTAMP},
      an_rdata = #{anRdata,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByIds" parameterType="map" resultType="string">
    select
    query_domain
    from dns_record_iodine
    WHERE id in
    <foreach collection="ids" open="(" separator="," close=")" item="val">
      ${val}
    </foreach>
  </select>
</mapper>